package com.company.restaurantpos.utils

import android.content.Context
import androidx.compose.runtime.*
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import java.util.*
import javax.inject.Inject
import javax.inject.Singleton

private val Context.localizationDataStore: DataStore<Preferences> by preferencesDataStore(name = "localization_preferences")

/**
 * Manager for app localization and language switching
 */
@Singleton
class LocalizationManager @Inject constructor(
    private val context: Context
) {
    
    companion object {
        private val SELECTED_LANGUAGE = stringPreferencesKey("selected_language")
        const val LANGUAGE_ENGLISH = "en"
        const val LANGUAGE_ARABIC = "ar"
    }
    
    /**
     * Get current language as Flow
     */
    fun getCurrentLanguageFlow(): Flow<String> {
        return context.localizationDataStore.data.map { preferences ->
            preferences[SELECTED_LANGUAGE] ?: getSystemLanguage()
        }
    }
    
    /**
     * Get current language
     */
    suspend fun getCurrentLanguage(): String {
        return context.localizationDataStore.data.first()[SELECTED_LANGUAGE] ?: getSystemLanguage()
    }
    
    /**
     * Set language
     */
    suspend fun setLanguage(language: String) {
        context.localizationDataStore.edit { preferences ->
            preferences[SELECTED_LANGUAGE] = language
        }
    }
    
    /**
     * Get system language
     */
    private fun getSystemLanguage(): String {
        val systemLanguage = Locale.getDefault().language
        return if (systemLanguage == LANGUAGE_ARABIC) LANGUAGE_ARABIC else LANGUAGE_ENGLISH
    }
    
    /**
     * Get supported languages
     */
    fun getSupportedLanguages(): List<Language> {
        return listOf(
            Language(LANGUAGE_ENGLISH, "English", "üá∫üá∏"),
            Language(LANGUAGE_ARABIC, "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "üá∏üá¶")
        )
    }
    
    /**
     * Check if current language is RTL
     */
    suspend fun isRTL(): Boolean {
        return getCurrentLanguage() == LANGUAGE_ARABIC
    }
    
    /**
     * Get localized string
     */
    fun getString(key: String, language: String = LANGUAGE_ENGLISH): String {
        return when (language) {
            LANGUAGE_ARABIC -> getArabicString(key)
            else -> getEnglishString(key)
        }
    }
    
    /**
     * Get English strings
     */
    private fun getEnglishString(key: String): String {
        return when (key) {
            // App
            "app_name" -> "Restaurant POS"
            "welcome" -> "Welcome"
            "loading" -> "Loading..."
            "error" -> "Error"
            "success" -> "Success"
            "cancel" -> "Cancel"
            "ok" -> "OK"
            "yes" -> "Yes"
            "no" -> "No"
            "save" -> "Save"
            "delete" -> "Delete"
            "edit" -> "Edit"
            "add" -> "Add"
            "search" -> "Search"
            "filter" -> "Filter"
            "refresh" -> "Refresh"
            
            // Authentication
            "login" -> "Login"
            "logout" -> "Logout"
            "username" -> "Username"
            "password" -> "Password"
            "sign_in" -> "Sign In"
            "sign_out" -> "Sign Out"
            "remember_me" -> "Remember me"
            "forgot_password" -> "Forgot Password?"
            "change_password" -> "Change Password"
            "current_password" -> "Current Password"
            "new_password" -> "New Password"
            "confirm_password" -> "Confirm Password"
            
            // Navigation
            "home" -> "Home"
            "pos" -> "POS"
            "reports" -> "Reports"
            "inventory" -> "Inventory"
            "settings" -> "Settings"
            "kitchen" -> "Kitchen"
            "admin" -> "Admin"
            
            // POS
            "add_to_cart" -> "Add to Cart"
            "cart" -> "Cart"
            "checkout" -> "Checkout"
            "total" -> "Total"
            "subtotal" -> "Subtotal"
            "tax" -> "Tax"
            "discount" -> "Discount"
            "grand_total" -> "Grand Total"
            "cash" -> "Cash"
            "card" -> "Card"
            "payment_method" -> "Payment Method"
            "print_receipt" -> "Print Receipt"
            "print_kitchen_ticket" -> "Print Kitchen Ticket"
            
            // Orders
            "orders" -> "Orders"
            "order_number" -> "Order #"
            "order_date" -> "Order Date"
            "order_status" -> "Order Status"
            "pending" -> "Pending"
            "preparing" -> "Preparing"
            "ready" -> "Ready"
            "completed" -> "Completed"
            "cancelled" -> "Cancelled"
            
            // Products
            "products" -> "Products"
            "product_name" -> "Product Name"
            "price" -> "Price"
            "category" -> "Category"
            "description" -> "Description"
            "available" -> "Available"
            "out_of_stock" -> "Out of Stock"
            
            // Reports
            "daily_sales" -> "Daily Sales"
            "top_products" -> "Top Products"
            "low_stock" -> "Low Stock"
            "sales_report" -> "Sales Report"
            "revenue" -> "Revenue"
            "quantity_sold" -> "Quantity Sold"
            
            // Settings
            "backup" -> "Backup"
            "restore" -> "Restore"
            "export_backup" -> "Export Backup"
            "import_backup" -> "Import Backup"
            "user_management" -> "User Management"
            "create_user" -> "Create User"
            "language" -> "Language"
            "theme" -> "Theme"
            "dark_mode" -> "Dark Mode"
            "light_mode" -> "Light Mode"
            
            // Messages
            "thank_you" -> "Thank you for your visit!"
            "order_placed" -> "Order placed successfully"
            "payment_successful" -> "Payment successful"
            "backup_created" -> "Backup created successfully"
            "backup_restored" -> "Backup restored successfully"
            "user_created" -> "User created successfully"
            "password_changed" -> "Password changed successfully"
            
            else -> key
        }
    }
    
    /**
     * Get Arabic strings
     */
    private fun getArabicString(key: String): String {
        return when (key) {
            // App
            "app_name" -> "ŸÜÿ∏ÿßŸÖ ŸÜŸÇÿßÿ∑ ÿßŸÑÿ®Ÿäÿπ ŸÑŸÑŸÖÿ∑ÿßÿπŸÖ"
            "welcome" -> "ŸÖÿ±ÿ≠ÿ®ÿßŸã"
            "loading" -> "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ..."
            "error" -> "ÿÆÿ∑ÿ£"
            "success" -> "ŸÜÿ¨ÿ≠"
            "cancel" -> "ÿ•ŸÑÿ∫ÿßÿ°"
            "ok" -> "ŸÖŸàÿßŸÅŸÇ"
            "yes" -> "ŸÜÿπŸÖ"
            "no" -> "ŸÑÿß"
            "save" -> "ÿ≠ŸÅÿ∏"
            "delete" -> "ÿ≠ÿ∞ŸÅ"
            "edit" -> "ÿ™ÿπÿØŸäŸÑ"
            "add" -> "ÿ•ÿ∂ÿßŸÅÿ©"
            "search" -> "ÿ®ÿ≠ÿ´"
            "filter" -> "ÿ™ÿµŸÅŸäÿ©"
            "refresh" -> "ÿ™ÿ≠ÿØŸäÿ´"
            
            // Authentication
            "login" -> "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ"
            "logout" -> "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨"
            "username" -> "ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ"
            "password" -> "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
            "sign_in" -> "ÿØÿÆŸàŸÑ"
            "sign_out" -> "ÿÆÿ±Ÿàÿ¨"
            "remember_me" -> "ÿ™ÿ∞ŸÉÿ±ŸÜŸä"
            "forgot_password" -> "ŸÜÿ≥Ÿäÿ™ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±ÿü"
            "change_password" -> "ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
            "current_password" -> "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑÿ≠ÿßŸÑŸäÿ©"
            "new_password" -> "ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿßŸÑÿ¨ÿØŸäÿØÿ©"
            "confirm_password" -> "ÿ™ÿ£ŸÉŸäÿØ ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±"
            
            // Navigation
            "home" -> "ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"
            "pos" -> "ŸÜŸÇÿßÿ∑ ÿßŸÑÿ®Ÿäÿπ"
            "reports" -> "ÿßŸÑÿ™ŸÇÿßÿ±Ÿäÿ±"
            "inventory" -> "ÿßŸÑŸÖÿÆÿ≤ŸàŸÜ"
            "settings" -> "ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™"
            "kitchen" -> "ÿßŸÑŸÖÿ∑ÿ®ÿÆ"
            "admin" -> "ÿßŸÑÿ•ÿØÿßÿ±ÿ©"
            
            // POS
            "add_to_cart" -> "ÿ•ÿ∂ÿßŸÅÿ© ŸÑŸÑÿ≥ŸÑÿ©"
            "cart" -> "ÿßŸÑÿ≥ŸÑÿ©"
            "checkout" -> "ÿßŸÑÿØŸÅÿπ"
            "total" -> "ÿßŸÑŸÖÿ¨ŸÖŸàÿπ"
            "subtotal" -> "ÿßŸÑŸÖÿ¨ŸÖŸàÿπ ÿßŸÑŸÅÿ±ÿπŸä"
            "tax" -> "ÿßŸÑÿ∂ÿ±Ÿäÿ®ÿ©"
            "discount" -> "ÿßŸÑÿÆÿµŸÖ"
            "grand_total" -> "ÿßŸÑŸÖÿ¨ŸÖŸàÿπ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä"
            "cash" -> "ŸÜŸÇÿØÿßŸã"
            "card" -> "ÿ®ÿ∑ÿßŸÇÿ©"
            "payment_method" -> "ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ"
            "print_receipt" -> "ÿ∑ÿ®ÿßÿπÿ© ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©"
            "print_kitchen_ticket" -> "ÿ∑ÿ®ÿßÿπÿ© ÿ™ÿ∞ŸÉÿ±ÿ© ÿßŸÑŸÖÿ∑ÿ®ÿÆ"
            
            // Orders
            "orders" -> "ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™"
            "order_number" -> "ÿ±ŸÇŸÖ ÿßŸÑÿ∑ŸÑÿ®"
            "order_date" -> "ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ∑ŸÑÿ®"
            "order_status" -> "ÿ≠ÿßŸÑÿ© ÿßŸÑÿ∑ŸÑÿ®"
            "pending" -> "ŸÅŸä ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±"
            "preparing" -> "ŸÇŸäÿØ ÿßŸÑÿ™ÿ≠ÿ∂Ÿäÿ±"
            "ready" -> "ÿ¨ÿßŸáÿ≤"
            "completed" -> "ŸÖŸÉÿ™ŸÖŸÑ"
            "cancelled" -> "ŸÖŸÑÿ∫Ÿä"
            
            // Products
            "products" -> "ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™"
            "product_name" -> "ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨"
            "price" -> "ÿßŸÑÿ≥ÿπÿ±"
            "category" -> "ÿßŸÑŸÅÿ¶ÿ©"
            "description" -> "ÿßŸÑŸàÿµŸÅ"
            "available" -> "ŸÖÿ™ŸàŸÅÿ±"
            "out_of_stock" -> "ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±"
            
            // Reports
            "daily_sales" -> "ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ©"
            "top_products" -> "ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™"
            "low_stock" -> "ŸÖÿÆÿ≤ŸàŸÜ ŸÖŸÜÿÆŸÅÿ∂"
            "sales_report" -> "ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™"
            "revenue" -> "ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™"
            "quantity_sold" -> "ÿßŸÑŸÉŸÖŸäÿ© ÿßŸÑŸÖÿ®ÿßÿπÿ©"
            
            // Settings
            "backup" -> "ÿßŸÑŸÜÿ≥ÿÆ ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿä"
            "restore" -> "ÿßŸÑÿßÿ≥ÿ™ÿπÿßÿØÿ©"
            "export_backup" -> "ÿ™ÿµÿØŸäÿ± ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ©"
            "import_backup" -> "ÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ©"
            "user_management" -> "ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ"
            "create_user" -> "ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿ™ÿÆÿØŸÖ"
            "language" -> "ÿßŸÑŸÑÿ∫ÿ©"
            "theme" -> "ÿßŸÑŸÖÿ∏Ÿáÿ±"
            "dark_mode" -> "ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ∏ŸÑŸÖ"
            "light_mode" -> "ÿßŸÑŸàÿ∂ÿπ ÿßŸÑŸÖÿ∂Ÿäÿ°"
            
            // Messages
            "thank_you" -> "ÿ¥ŸÉÿ±ÿßŸã ŸÑÿ≤Ÿäÿßÿ±ÿ™ŸÉŸÖ!"
            "order_placed" -> "ÿ™ŸÖ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑÿ∑ŸÑÿ® ÿ®ŸÜÿ¨ÿßÿ≠"
            "payment_successful" -> "ÿ™ŸÖ ÿßŸÑÿØŸÅÿπ ÿ®ŸÜÿ¨ÿßÿ≠"
            "backup_created" -> "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ© ÿ®ŸÜÿ¨ÿßÿ≠"
            "backup_restored" -> "ÿ™ŸÖ ÿßÿ≥ÿ™ÿπÿßÿØÿ© ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ∑Ÿäÿ© ÿ®ŸÜÿ¨ÿßÿ≠"
            "user_created" -> "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÜÿ¨ÿßÿ≠"
            "password_changed" -> "ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ± ÿ®ŸÜÿ¨ÿßÿ≠"
            
            else -> key
        }
    }
}

/**
 * Language data class
 */
data class Language(
    val code: String,
    val name: String,
    val flag: String
)

/**
 * Composable for providing localization context
 */
@Composable
fun LocalizationProvider(
    localizationManager: LocalizationManager,
    content: @Composable (LocalizationState) -> Unit
) {
    val currentLanguage by localizationManager.getCurrentLanguageFlow().collectAsState(initial = LocalizationManager.LANGUAGE_ENGLISH)
    
    val localizationState = remember(currentLanguage) {
        LocalizationState(
            currentLanguage = currentLanguage,
            isRTL = currentLanguage == LocalizationManager.LANGUAGE_ARABIC,
            getString = { key -> localizationManager.getString(key, currentLanguage) }
        )
    }
    
    content(localizationState)
}

/**
 * Localization state
 */
data class LocalizationState(
    val currentLanguage: String,
    val isRTL: Boolean,
    val getString: (String) -> String
)